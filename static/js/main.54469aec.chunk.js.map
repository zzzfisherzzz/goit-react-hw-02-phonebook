{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleNameChange","event","target","value","setState","handleNumberChange","handleSubmit","preventDefault","props","onAddContact","this","onSubmit","className","styles","form","inputGroup","label","type","onChange","required","pattern","formBtn","Component","Contact","onDeleteNumber","buttonDelete","onClick","ContactList","items","map","item","key","id","Filter","onChangeFilter","App","contacts","filter","addContact","contact","find","con","alert","contactToAdd","shortid","generate","deleteNumber","changeFilter","e","persistedComments","localStorage","getItem","JSON","parse","prevState","prevProps","setItem","stringify","filteredContacts","toLowerCase","includes","filterContactsByQuery","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54469aec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__378f8\",\"inputGroup\":\"ContactForm_inputGroup__2-bCj\",\"formBtn\":\"ContactForm_formBtn__1YZTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"Contact_buttonDelete__1GCm7\"};","import React, { Component } from 'react'\nimport styles from './ContactForm.module.css'\n\nexport default class ContactForm extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleNameChange = event => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    handleNumberChange = event => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        if (!this.state.name || !this.state.number) return;\n    \n        this.props.onAddContact({ ...this.state });\n    \n        this.setState({\n          name: '',\n          number: '',\n        });\n    };\n\n\n    render() {\n        const { name, number } = this.state;\n\n        return (\n            <form onSubmit={this.handleSubmit} className={styles.form}>\n                    <div className={styles.inputGroup}>\n                        <label className={styles.label}>Name</label>\n                        <input\n                            type=\"text\"\n                            value={name}\n                            name=\"name\"\n                            onChange={this.handleNameChange}\n                            required\n                        />\n                    </div>\n                    <div className={styles.inputGroup}>\n                        <label className={styles.label}>Number</label>\n                        <input\n                            type=\"tel\"\n                            value={number}\n                            name=\"number\"\n                            onChange={this.handleNumberChange}\n                            pattern=\"[0]{1}[0-9]{9}\"\n                            required    \n                        />\n                    </div>\n                <button className={styles.formBtn} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        )\n    }\n}\n","import React from 'react';\nimport styles from \"./Contact.module.css\";\n\nconst Contact = ({ name, number, onDeleteNumber }) => {\n    return (\n        <div>\n            <span>\n                {name}: {number}\n            </span>\n            <button\n                className={styles.buttonDelete}\n                type=\"button\"\n                onClick={onDeleteNumber}\n            >\n            DELETE\n            </button>\n        </div>\n    );\n};\n\nexport default Contact;","import React from 'react';\nimport Contact from \"../Contact/Contact\";\n\nconst ContactList = ({ items, onDeleteNumber }) => {\n    return (\n        <ul>\n            {items.map(item => (\n            <li key={item.id}>\n                <Contact {...item} onDeleteNumber={() => onDeleteNumber(item.id)} />\n            </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default ContactList;","import React from 'react';\n\nconst Filter = ({ value, onChangeFilter }) => {\n    return (\n        <div>\n            <input\n            type=\"text\"\n            value={value}\n            name=\"name\"\n            onChange={onChangeFilter}\n            required\n            />\n            <label>Filter</label>\n        </div>\n    );\n};\n\nexport default Filter;","import React, { Component } from 'react'\nimport './App.css';\nimport shortid from 'shortid';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\n\n\nconst filterContactsByQuery = (filter, contacts) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const persistedComments = localStorage.getItem('contacts');\n\n    if (persistedComments) {\n      this.setState({ contacts: JSON.parse(persistedComments) });\n    }\n  }\n\n  componentDidUpdate(prevState, prevProps) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = contact => {\n    const { name } = contact;\n    const contactsArray = this.state.contacts;\n    const nameExist = contactsArray.find(con => con['name'] === name);\n    if (nameExist) {\n      alert(`${name} is already exist`);\n      return;\n    }\n\n    const contactToAdd = {\n      ...contact,\n      id: shortid.generate(),\n    };\n\n    this.setState(state => ({\n      contacts: [...state.contacts, contactToAdd],\n    }));\n  };\n\n  deleteNumber = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n\n  render() {\n    const { contacts, filter } = this.state;\n    const filteredContacts = filterContactsByQuery(filter, contacts);\n\n    return (\n      <div className=\"wrap\">\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length >= 2 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n        {contacts.length > 0 && (\n          <ContactList\n            items={filteredContacts}\n            onDeleteNumber={this.deleteNumber}\n          />\n        )}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}